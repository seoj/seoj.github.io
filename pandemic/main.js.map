{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/card.ts","webpack:///./src/app/city.ts","webpack:///./src/app/disease.ts","webpack:///./src/app/game.ts","webpack:///./src/app/multiset.ts","webpack:///./src/app/player.ts","webpack:///./src/app/util.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,+DAA+D,+H;;;;;;;;;;;ACA/D,oJAAoJ,kKAAkK,aAAa,2OAA2O,cAAc,mBAAmB,mCAAmC,uEAAuE,sBAAsB,ycAAyc,aAAa,uBAAuB,sBAAsB,8EAA8E,gBAAgB,uOAAuO,cAAc,sHAAsH,WAAW,+DAA+D,8BAA8B,sSAAsS,wJ;;;;;;;;;;;;;;;;;;;ACA3gE;AACY;AACR;AAOlC;IALA;QAME,SAAI,GAAS,IAAI,CAAC;IASpB,CAAC;IAPC,gCAAS,GAAT;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,0CAAI,EAAE,CAAC;IACzB,CAAC;IAED,kCAAW,GAAX,UAAY,IAAY;QACtB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,8CAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3C,CAAC;IATU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,yFAAmC;;SAEpC,CAAC;OACW,YAAY,CAUxB;IAAD,mBAAC;CAAA;AAVwB;;;;;;;;;;;;;;;;;;;;;ACTiC;AACb;AACJ;AAEM;AAa/C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAXrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,0DAAW;aACZ;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;ACftB;AAAA;AAAA;AAAA;IACE,cACW,IAAU,EACV,IAAW;QADX,SAAI,GAAJ,IAAI,CAAM;QACV,SAAI,GAAJ,IAAI,CAAO;IAClB,CAAC;IACP,WAAC;AAAD,CAAC;;AAED,IAAY,IAGX;AAHD,WAAY,IAAI;IACd,yCAAS;IACT,mCAAM;AACR,CAAC,EAHW,IAAI,KAAJ,IAAI,QAGf;;;;;;;;;;;;;ACZD;AAAA;AAAA;AAAsC;AAGtC;IAIE,cACW,IAAY,EACZ,OAAgB;QADhB,SAAI,GAAJ,IAAI,CAAQ;QACZ,YAAO,GAAP,OAAO,CAAS;QALlB,gBAAW,GAAW,EAAE,CAAC;QACzB,eAAU,GAAG,IAAI,kDAAQ,EAAW,CAAC;IAK1C,CAAC;IACP,WAAC;AAAD,CAAC;;;;;;;;;;;;;;ACXD;AAAA;AAAA;IAGE,iBAAqB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QAFjC,UAAK,GAAG,KAAK,CAAC;IAEuB,CAAC;IACxC,cAAC;AAAD,CAAC;;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACkB;AAEZ;AACH;AAEjC;IAwBE;QAvBS,YAAO,GAAa,EAAE,CAAC;QACvB,aAAQ,GAAG;YAClB,IAAI,gDAAO,CAAC,OAAO,CAAC;YACpB,IAAI,gDAAO,CAAC,MAAM,CAAC;YACnB,IAAI,gDAAO,CAAC,KAAK,CAAC;YAClB,IAAI,gDAAO,CAAC,QAAQ,CAAC;SACtB,CAAC;QACO,WAAM,GAAW,EAAE,CAAC;QACpB,sBAAiB,GAAW,EAAE,CAAC;QAC/B,yBAAoB,GAAW,EAAE,CAAC;QAClC,mBAAc,GAAW,EAAE,CAAC;QAC5B,sBAAiB,GAAW,EAAE,CAAC;QACxC,WAAM,GAAG;YACP,qBAAqB,EAAE;gBACrB,CAAC,EAAE,CAAC;gBACJ,CAAC,EAAE,CAAC;gBACJ,CAAC,EAAE,CAAC;aACL;YACD,gBAAgB,EAAE,CAAC;YACnB,qBAAqB,EAAE,QAAQ;SAChC,CAAC;QACF,gBAAW,GAAG,KAAK,CAAC;QAGlB,KAAsB,UAAa,EAAb,SAAI,CAAC,QAAQ,EAAb,cAAa,EAAb,IAAa,EAAE;YAAhC,IAAM,OAAO;YAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;gBAC3B,IAAM,IAAI,GAAG,IAAI,0CAAI,CAAI,OAAO,CAAC,IAAI,SAAI,CAAG,EAAE,OAAO,CAAC,CAAC;gBACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACvB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,0CAAI,CAAC,0CAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;gBAChE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,0CAAI,CAAC,0CAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;aAC3D;SACF;IACH,CAAC;IAED,yBAAU,GAAV;QAAA,iBA6BC;QA5BC,qDAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtB,qDAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAChC,qDAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAE7B,IAAM,eAAe,GAAW,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACvF,IAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAI,IAAI,WAAI,CAAC,IAAI,KAAK,KAAI,CAAC,MAAM,CAAC,qBAAqB,EAA/C,CAA+C,CAAC,CAAC;QAElG,KAAqB,UAAY,EAAZ,SAAI,CAAC,OAAO,EAAZ,cAAY,EAAZ,IAAY,EAAE;YAA9B,IAAM,MAAM;YACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE;gBACxC,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;gBACvC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACxB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACnC;YAED,MAAM,CAAC,QAAQ,GAAG,eAAe,CAAC;SACnC;QAED,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE;YACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,IAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC;gBAC1C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACnD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACtC;SACF;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IACH,WAAC;AAAD,CAAC;;;;;;;;;;;;;;ACvED;AAAA;AAAA;IAAA;QACmB,QAAG,GAAG,IAAI,GAAG,EAAa,CAAC;IAU9C,CAAC;IARC,sBAAG,GAAH,UAAI,KAAQ;QACV,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,sBAAG,GAAH,UAAI,KAAQ,EAAE,KAAS;QAAT,iCAAS;QACrB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IACH,eAAC;AAAD,CAAC;;;;;;;;;;;;;;ACRD;AAAA;AAAA;IAKE,gBACW,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QALvB,qBAAgB,GAAG,CAAC,CAAC;QACZ,UAAK,GAAW,EAAE,CAAC;QAC5B,aAAQ,GAAS,IAAI,CAAC;IAIlB,CAAC;IACP,aAAC;AAAD,CAAC;;;;;;;;;;;;;;ACXD;AAAA;AAAO,SAAS,OAAO,CAAI,GAAQ;IACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACvC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;KACtC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAS,IAAI,CAAC,GAAU,EAAE,CAAS,EAAE,CAAS;IAC5C,IAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACjB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IAChB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACb,CAAC;AAED,SAAS,OAAO,CAAC,GAAW,EAAE,GAAW;IACvC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AACvD,CAAC;;;;;;;;;;;;;ACfD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<button (click)=\\\"onNewGame()\\\">New game</button>\\n\\n<div *ngIf=\\\"game?.initialized === false\\\">\\n  <button (click)=\\\"name = null; addPlayerDialogVisible = true\\\">Add player</button>\\n  <div *ngIf=\\\"game.players.length === 0\\\">No players</div>\\n  <div *ngFor=\\\"let player of game.players\\\">{{player.name}}</div>\\n  <button [disabled]=\\\"game.players.length < 2\\\" (click)=\\\"game.initialize()\\\">Start game</button>\\n</div>\\n\\n<div *ngIf=\\\"game?.initialized === true\\\">\\n  <table>\\n    <tr *ngFor=\\\"let disease of game.diseases\\\">\\n      <th>{{disease.name}}</th>\\n      <td>{{disease.cured?'Cured':'Not cured'}}</td>\\n    </tr>\\n    <tr>\\n      <th>Current player</th>\\n      <td>{{game.players[0].name}}</td>\\n    </tr>\\n  </table>\\n  <div>\\n    <button (click)=\\\"currentTab = 'players'\\\">Players</button>\\n    <button (click)=\\\"currentTab = 'cities'\\\">Cities</button>\\n  </div>\\n  <div *ngIf=\\\"currentTab === 'players'\\\">\\n    <table>\\n      <thead>\\n        <tr>\\n          <th>Name</th>\\n          <th>Position</th>\\n          <th>Cards</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor=\\\"let player of game.players\\\">\\n          <td>{{player.name}}</td>\\n          <td>{{player.position.name}}</td>\\n          <td>\\n            <div *ngFor=\\\"let card of player.cards\\\">{{card.city.name}}</div>\\n          </td>\\n      </tbody>\\n    </table>\\n  </div>\\n  <div *ngIf=\\\"currentTab === 'cities'\\\">\\n    <table>\\n      <thead>\\n        <tr>\\n          <th>Name</th>\\n          <th *ngFor=\\\"let disease of game.diseases\\\">{{disease.name}}</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor=\\\"let city of game.cities\\\">\\n          <td>{{city.name}}</td>\\n          <td *ngFor=\\\"let disease of game.diseases\\\">{{city.infections.get(disease)}}</td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\\n<div class=\\\"modal\\\" *ngIf=\\\"addPlayerDialogVisible\\\">\\n  <table>\\n    <tr>\\n      <th>Name</th>\\n      <td><input [(ngModel)]=\\\"name\\\" tabindex=\\\"0\\\"></td>\\n    </tr>\\n    <div>\\n      <button (click)=\\\"onAddPlayer(name); addPlayerDialogVisible = false\\\">OK</button>\\n      <button (click)=\\\"addPlayerDialogVisible = false\\\">Cancel</button>\\n    </div>\\n  </table>\\n</div>\"","import { Game } from './game';\nimport { Component } from '@angular/core';\nimport { Player } from './player';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  game: Game = null;\n\n  onNewGame() {\n    this.game = new Game();\n  }\n\n  onAddPlayer(name: string) { \n    this.game.players.push(new Player(name));\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { City } from './city';\n\nexport class Card {\n  constructor(\n    readonly type: Type,\n    readonly city?: City,\n  ) { }\n}\n\nexport enum Type {\n  INFECTION,\n  PLAYER,\n}\n","import { Multiset } from './multiset';\nimport { Disease } from './disease';\n\nexport class City {\n  readonly connections: City[] = [];\n  readonly infections = new Multiset<Disease>();\n\n  constructor(\n    readonly name: string,\n    readonly disease: Disease,\n  ) { }\n}\n","export class Disease {\n  cured = false;\n\n  constructor(readonly name: string) { }\n}\n","import { City } from './city';\nimport { Card, Type as CardType } from './card';\nimport { Player } from './player';\nimport { Disease } from './disease';\nimport { shuffle } from './util';\n\nexport class Game {\n  readonly players: Player[] = [];\n  readonly diseases = [\n    new Disease('BLACK'),\n    new Disease('BLUE'),\n    new Disease('RED'),\n    new Disease('YELLOW'),\n  ];\n  readonly cities: City[] = [];\n  readonly infectionDrawPile: Card[] = [];\n  readonly infectionDiscardPile: Card[] = [];\n  readonly playerDrawPile: Card[] = [];\n  readonly playerDiscardPile: Card[] = [];\n  config = {\n    playerInitialCardSize: {\n      2: 4,\n      3: 3,\n      4: 2,\n    },\n    playerMaxActions: 4,\n    playerInitialPosition: 'BLUE 0',\n  };\n  initialized = false;\n\n  constructor() {\n    for (const disease of this.diseases) {\n      for (let i = 0; i < 12; i++) {\n        const city = new City(`${disease.name} ${i}`, disease);\n        this.cities.push(city);\n        this.infectionDrawPile.push(new Card(CardType.INFECTION, city));\n        this.playerDrawPile.push(new Card(CardType.PLAYER, city));\n      }\n    }\n  }\n\n  initialize() {\n    shuffle(this.players);\n    shuffle(this.infectionDrawPile);\n    shuffle(this.playerDrawPile);\n\n    const initialCardSize: number = this.config.playerInitialCardSize[this.players.length];\n    const initialPosition = this.cities.find(city => city.name === this.config.playerInitialPosition);\n\n    for (const player of this.players) {\n      for (let i = 0; i < initialCardSize; i++) {\n        const card = this.playerDrawPile.pop();\n        player.cards.push(card);\n        this.playerDiscardPile.push(card);\n      }\n\n      player.position = initialPosition;\n    }\n\n    for (let count = 1; count <= 3; count++) {\n      for (let i = 0; i < 3; i++) {\n        const card = this.infectionDrawPile.pop();\n        card.city.infections.set(card.city.disease, count);\n        this.infectionDiscardPile.push(card);\n      }\n    }\n\n    this.initialized = true;\n\n    console.log(this);\n  }\n}\n","export class Multiset<T> {\n  private readonly map = new Map<T, number>();\n\n  get(value: T) {\n    return this.map.get(value) || 0;\n  }\n\n  set(value: T, count = 1) {\n    this.map.set(value, this.get(value) + count);\n    return this;\n  }\n}\n","import { City } from './city';\nimport { Card } from './card';\n\nexport class Player {\n  remainingActions = 0;\n  readonly cards: Card[] = [];\n  position: City = null;\n\n  constructor(\n    readonly name: string,\n  ) { }\n}\n","export function shuffle<T>(arr: T[]) {\n  for (let i = 0; i < arr.length - 1; i++) {\n    swap(arr, i, randInt(i, arr.length));\n  }\n  return arr;\n}\n\nfunction swap(arr: any[], i: number, j: number) {\n  const t = arr[i];\n  arr[i] = arr[j];\n  arr[j] = t;\n}\n\nfunction randInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}